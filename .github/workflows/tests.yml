name: Tests
on:
  release:
    types: [published]
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    name: "py${{ matrix.python-version }} / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Clone the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Link gfortran on macos
        if: runner.os == 'macOS'
        run: brew unlink gfortran && brew link --overwrite gfortran
      - name: Set up windows compilers
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
      - name: Install dependencies
        run: |
          python -m pip install -U pip pytest
          python -m pip install .
        env:
          DISTUTILS_USE_SDK: 1
          MSSdk: 1
      - name: Run tests
        run: python -m pytest --durations=0 --maxfail=1 -vs tests/tests.py
        env:
          SPS_HOME: ${{ github.workspace }}/src/fsps/libfsps

  options:
    name: "check compiler options"
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          FFLAGS="-DMIST=0 -DPADOVA=1 -DMILES=0 -DBASEL=1" python -m pip install .
      - name: Check libraries
        run: |
          python << EOF
          import fsps
          sps = fsps.StellarPopulation()
          assert sps.libraries[0] == b'pdva', "Incorrect isochrone library"
          assert sps.libraries[1] == b'basel', "Incorrect spectral library"
          print("success")
          EOF
        env:
          SPS_HOME: ${{ github.workspace }}/src/fsps/libfsps

  docs:
    if: github.event_name != 'pull_request'
    name: "docs"
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install -U pip sphinx
          python -m pip install .
      - name: Build documentation
        run: .github/workflows/build_docs.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SPS_HOME: ${{ github.workspace }}/src/fsps/libfsps
          STABLE: ${{ github.event_name == 'release' && github.event.action == 'published' }}
